// <auto-generated />
using System;
using GA.UniCard.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.UniCard.Domain.Migrations
{
    [DbContext(typeof(UniCardDbContext))]
    partial class UniCardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ordering_Date");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Total_Amount");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderDate = new DateTime(2024, 6, 8, 21, 43, 22, 450, DateTimeKind.Local).AddTicks(7861),
                            TotalAmount = 353m,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            OrderDate = new DateTime(2024, 5, 24, 21, 43, 22, 450, DateTimeKind.Local).AddTicks(7890),
                            TotalAmount = 411m,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            OrderDate = new DateTime(2024, 3, 31, 21, 43, 22, 450, DateTimeKind.Local).AddTicks(7894),
                            TotalAmount = 703m,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            OrderDate = new DateTime(2024, 6, 23, 21, 43, 22, 450, DateTimeKind.Local).AddTicks(7897),
                            TotalAmount = 670m,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            OrderDate = new DateTime(2024, 6, 21, 21, 43, 22, 450, DateTimeKind.Local).AddTicks(7900),
                            TotalAmount = 118m,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            OrderDate = new DateTime(2024, 4, 22, 21, 43, 22, 450, DateTimeKind.Local).AddTicks(7904),
                            TotalAmount = 400m,
                            UserId = 6L
                        });
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Item_Price");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Item_Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsDescending();

                    b.HasIndex("ProductId")
                        .IsDescending();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Price = 86m,
                            ProductId = 1L,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Price = 62m,
                            ProductId = 2L,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Price = 67m,
                            ProductId = 3L,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Price = 95m,
                            ProductId = 4L,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Price = 85m,
                            ProductId = 5L,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 3L,
                            Price = 54m,
                            ProductId = 2L,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 7L,
                            OrderId = 6L,
                            Price = 49m,
                            ProductId = 4L,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d920564-95d4-444e-87e1-5fcdea4db1ad",
                            Email = "GigaGiga@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10a00969-66ce-4f1e-b30f-68cc10eb0cfb",
                            TwoFactorEnabled = false,
                            UserName = "Guga$445"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f892689-011d-405c-9452-4c39e263bf3e",
                            Email = "GugaG3434uga@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dc8bb58-e2e3-4d55-a5e7-f97244d13c16",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga#43"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f06267e3-ce55-41d4-8bcc-89b25e847805",
                            Email = "3443@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e31454e7-4ac9-4adc-a64e-a1ad529b0e54",
                            TwoFactorEnabled = false,
                            UserName = "#3445"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e63c41e9-4ef1-4d1e-9e1c-6e6a275c9b78",
                            Email = "Guga4334Guga@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57bca823-95c0-49cc-8732-90a67d8574fe",
                            TwoFactorEnabled = false,
                            UserName = "Gia3454"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32af51e7-6054-4009-a55e-c2e023ce75a5",
                            Email = "344334@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c0f2a78-4433-49c2-bc2d-f47dadef5d9d",
                            TwoFactorEnabled = false,
                            UserName = "Gaga45454"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35a4c394-51cc-4bbc-9f52-154d69d57d2e",
                            Email = "GugaGu343ga@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5efb3628-e56e-4383-88b1-49b49363b7f7",
                            TwoFactorEnabled = false,
                            UserName = "Tekla$#43"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504cb420-8b41-41b9-9216-d043bb0d52ce",
                            Email = "Gug3434aGuga@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee74caab-faea-4a84-a34f-1aa776ae2b5f",
                            TwoFactorEnabled = false,
                            UserName = "Tek3445"
                        });
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_Description");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Product_Price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Product_Name");

                    b.HasKey("Id");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "The milk is good produce in mountains",
                            Price = 87m,
                            ProductName = "Milk"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "The Apple is good produce in mountains",
                            Price = 94m,
                            ProductName = "Apple"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "The Banana is good produce in mountains",
                            Price = 81m,
                            ProductName = "Banana"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "The Bread is good produce in mountains",
                            Price = 53m,
                            ProductName = "Bread"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "The Gold is good produce in mountains",
                            Price = 87m,
                            ProductName = "Gold"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "The Fish is good produce in mountains",
                            Price = 97m,
                            ProductName = "Fish"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "The Beans is good produce in mountains",
                            Price = 74m,
                            ProductName = "Beans"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "The Sugar is good produce in mountains",
                            Price = 83m,
                            ProductName = "Sugar"
                        });
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("User_Name");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "Aapkhazava22@gmail.com",
                            Password = "Guga123",
                            PersonId = "1",
                            UserName = "Guga123#"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "Guga342@gmail.com",
                            Password = "Gaga1234",
                            PersonId = "2",
                            UserName = "Guga13guga##"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "Aapkhazava22@gmail.com",
                            Password = "Giga12346$",
                            PersonId = "3",
                            UserName = "Guga123#"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "NikaArtmeladze@gmail.com",
                            Password = "Guga%34",
                            PersonId = "4",
                            UserName = "Guga123#"
                        },
                        new
                        {
                            Id = 5L,
                            Email = "Giorgi123@gmail.com",
                            Password = "Giorgi324",
                            PersonId = "5",
                            UserName = "Guga123#"
                        },
                        new
                        {
                            Id = 6L,
                            Email = "UniPayAdmin@gmail.com",
                            Password = "Admin",
                            PersonId = "6",
                            UserName = "Admin#"
                        },
                        new
                        {
                            Id = 7L,
                            Email = "Aapkhazava2200@gmail.com",
                            Password = "User4562",
                            PersonId = "7",
                            UserName = "User#"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Order", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.UniCard.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.Person", "Person")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.User", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.Person", "Person")
                        .WithOne("Users")
                        .HasForeignKey("GA.UniCard.Domain.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.UniCard.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.UniCard.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Person", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Users")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GA.UniCard.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
